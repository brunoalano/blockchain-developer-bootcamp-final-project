{
  "address": "0x12A2d9330fd1fe20bffFB31b0710EeC31fC4E7a2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "countPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d1304da1cef7b28ee195a2a619fdc5dd5dd8d92374a0806746bc38416946c19",
  "receipt": {
    "to": null,
    "from": "0x10281799d2904046a3b8De084d1dCF440Dbc37D1",
    "contractAddress": "0x12A2d9330fd1fe20bffFB31b0710EeC31fC4E7a2",
    "transactionIndex": 2,
    "gasUsed": "472966",
    "logsBloom": "0x
    "blockHash": "0x4901bb073b10b43a803388ea34db22b7d4cca026cff151586739ead8e65fa503",
    "transactionHash": "0x0d1304da1cef7b28ee195a2a619fdc5dd5dd8d92374a0806746bc38416946c19",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 11319761,
        "transactionHash": "0x0d1304da1cef7b28ee195a2a619fdc5dd5dd8d92374a0806746bc38416946c19",
        "address": "0x12A2d9330fd1fe20bffFB31b0710EeC31fC4E7a2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000010281799d2904046a3b8de084d1dcf440dbc37d1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4901bb073b10b43a803388ea34db22b7d4cca026cff151586739ead8e65fa503"
      }
    ],
    "blockNumber": 11319761,
    "cumulativeGasUsed": "514966",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6ecead8b75a0f26c239a88f292ec8cb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"countPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"countPools()\":{\"notice\":\"Return Total Number of Pools created\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXRegistry.sol\":\"DEXRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/DEXRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DEXTokenPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DEXRegistry is Ownable {\\n    // Store the Tokens Pool's Location\\n    mapping(address => mapping(address => address)) public registry;\\n\\n    // Store the pool's locations\\n    address[] public pools;\\n\\n    // Event triggered when a new pair is created\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    /**\\n     * Return Total Number of Pools created\\n     */\\n    function countPools() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"Must be different tokens\\\");\\n        require(tokenA != address(0), \\\"Invalid Token\\\");\\n\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(registry[token0][token1] == address(0), \\\"Pool already exists\\\");\\n\\n        bytes memory bytecode = type(DEXTokenPool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        // DEXTokenPool(pair).initialize(token0, token1);\\n\\n        registry[token0][token1] = pair;\\n        registry[token1][token0] = pair;\\n        pools.push(pair);\\n\\n        // Send a new event for frontend\\n        emit PairCreated(token0, token1, pair, pools.length);\\n    }\\n}\\n\",\"keccak256\":\"0x87b4bbff85197d4b20cf41b97c6bad1457455b6d5af2addc93bc1dd1405ce606\",\"license\":\"MIT\"},\"contracts/DEXTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ncontract DEXTokenPool {}\\n\",\"keccak256\":\"0xda329881cfbaddbcb54401b2212ab877781e8d1fe89d6c2877361b6a23d3f771\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107298061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a5afd1b61161005b578063a5afd1b6146100c7578063ac4afa38146100fb578063c9c653961461010e578063f2fde38b1461012157600080fd5b80636fcdfed614610082578063715018a6146100985780638da5cb5b146100a2575b600080fd5b6002546040519081526020015b60405180910390f35b6100a0610134565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161008f565b6100af6100d5366004610629565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6100af61010936600461065c565b61019f565b6100af61011c366004610629565b6101c9565b6100a061012f366004610675565b6104b7565b6000546001600160a01b031633146101935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61019d6000610599565b565b600281815481106101af57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000816001600160a01b0316836001600160a01b0316141561022d5760405162461bcd60e51b815260206004820152601860248201527f4d75737420626520646966666572656e7420746f6b656e730000000000000000604482015260640161018a565b6001600160a01b0383166102835760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420546f6b656e00000000000000000000000000000000000000604482015260640161018a565b600080836001600160a01b0316856001600160a01b0316106102a65783856102a9565b84845b6001600160a01b038083166000908152600160209081526040808320848616845290915290205492945090925016156103245760405162461bcd60e51b815260206004820152601360248201527f506f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161018a565b60006040518060200161033690610601565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f56001600160a01b0385811660008181526001602081815260408084208a871680865290835281852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116988a1698891790915584845282862087875284528286208054821689179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549094168717909355925483519586529085015293985090917f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6000546001600160a01b031633146105115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161018a565b6001600160a01b03811661058d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161018a565b61059681610599565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b605c8061069883390190565b80356001600160a01b038116811461062457600080fd5b919050565b6000806040838503121561063c57600080fd5b6106458361060d565b91506106536020840161060d565b90509250929050565b60006020828403121561066e57600080fd5b5035919050565b60006020828403121561068757600080fd5b6106908261060d565b939250505056fe6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208651536528b8fa442e605152a9c34b9f87aa66614633f685e50d6e8c87555cce64736f6c63430008090033a26469706673582212204df16d1309c6ca2d4a8e8d20385ca799cc11f1caf820f949396ed72414f536cb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a5afd1b61161005b578063a5afd1b6146100c7578063ac4afa38146100fb578063c9c653961461010e578063f2fde38b1461012157600080fd5b80636fcdfed614610082578063715018a6146100985780638da5cb5b146100a2575b600080fd5b6002546040519081526020015b60405180910390f35b6100a0610134565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161008f565b6100af6100d5366004610629565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6100af61010936600461065c565b61019f565b6100af61011c366004610629565b6101c9565b6100a061012f366004610675565b6104b7565b6000546001600160a01b031633146101935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61019d6000610599565b565b600281815481106101af57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000816001600160a01b0316836001600160a01b0316141561022d5760405162461bcd60e51b815260206004820152601860248201527f4d75737420626520646966666572656e7420746f6b656e730000000000000000604482015260640161018a565b6001600160a01b0383166102835760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420546f6b656e00000000000000000000000000000000000000604482015260640161018a565b600080836001600160a01b0316856001600160a01b0316106102a65783856102a9565b84845b6001600160a01b038083166000908152600160209081526040808320848616845290915290205492945090925016156103245760405162461bcd60e51b815260206004820152601360248201527f506f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161018a565b60006040518060200161033690610601565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f56001600160a01b0385811660008181526001602081815260408084208a871680865290835281852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116988a1698891790915584845282862087875284528286208054821689179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549094168717909355925483519586529085015293985090917f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6000546001600160a01b031633146105115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161018a565b6001600160a01b03811661058d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161018a565b61059681610599565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b605c8061069883390190565b80356001600160a01b038116811461062457600080fd5b919050565b6000806040838503121561063c57600080fd5b6106458361060d565b91506106536020840161060d565b90509250929050565b60006020828403121561066e57600080fd5b5035919050565b60006020828403121561068757600080fd5b6106908261060d565b939250505056fe6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208651536528b8fa442e605152a9c34b9f87aa66614633f685e50d6e8c87555cce64736f6c63430008090033a26469706673582212204df16d1309c6ca2d4a8e8d20385ca799cc11f1caf820f949396ed72414f536cb64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "countPools()": {
        "notice": "Return Total Number of Pools created"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DEXRegistry.sol:DEXRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 848,
        "contract": "contracts/DEXRegistry.sol:DEXRegistry",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 851,
        "contract": "contracts/DEXRegistry.sol:DEXRegistry",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}