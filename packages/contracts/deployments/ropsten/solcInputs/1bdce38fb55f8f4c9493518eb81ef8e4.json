{
  "language": "Solidity",
  "sources": {
    "contracts/DEXRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./DEXTokenPool.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract DEXRegistry is Ownable {\n    // Store the Tokens Pool's Location\n    mapping(address => mapping(address => address)) public registry;\n\n    // Store the pool's locations\n    address[] public pools;\n\n    // Event triggered when a new pair is created\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    /**\n     * Return Total Number of Pools created\n     */\n    function countPools() external view returns (uint256) {\n        return pools.length;\n    }\n\n    /**\n     * Retrieve a List of All Pools\n     *\n     * Useful for the frontend\n     */\n    function allPools() public view returns (address[] memory) {\n        return pools;\n    }\n\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\n        require(tokenA != tokenB, \"Must be different tokens\");\n        require(tokenA != address(0), \"Invalid Token\");\n\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(registry[token0][token1] == address(0), \"Pool already exists\");\n\n        bytes memory bytecode = type(DEXTokenPool).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n\n        DEXTokenPool(pair).initialize(token0, token1);\n\n        registry[token0][token1] = pair;\n        registry[token1][token0] = pair;\n        pools.push(pair);\n\n        // Send a new event for frontend\n        emit PairCreated(token0, token1, pair, pools.length);\n    }\n}\n"
    },
    "contracts/DEXTokenPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DEXTokenPool {\n    // Store the Registry address\n    address public registry;\n\n    // Store the ERC20 Tokens addresses\n    address public token0;\n    address public token1;\n\n    // Pool Settings\n    // -------------------------------------\n\n    // Stores the total amount of share issued for the pool\n    uint256 public totalShares;\n\n    // Stores the amount of Token0 locked in the pool\n    uint256 public totalToken0;\n\n    // Stores the amount of Token1 locked in the pool\n    uint256 public totalToken1;\n\n    // Algorithmic constant used to determine price (k = totalToken0 * totalToken1)\n    uint256 public k;\n\n    // Stores the share holding of each provider\n    uint256 public constant PRECISION = 1_000_000; // Precision of 6 decimal places for shares\n    mapping(address => uint256) public shares;\n\n    // Restricts withdraw, swap feature till liquidity is added to the pool\n    modifier activePool() {\n        require(totalShares > 0, \"Zero Liquidity\");\n        _;\n    }\n\n    /**\n     * DEXTokenPool Constructor\n     *\n     * This contract will be built by `DEXRegistry`, so we need to\n     * assign it as a registry rulling this pool.\n     */\n    constructor() {\n        registry = msg.sender;\n    }\n\n    /**\n     * Initialize the Pool\n     *\n     * Since this contract will be deployed by `DEXRegistry`, we cannot pass\n     * information to the constructor method. We will call this method once to\n     * assign the token addresses to this pool.\n     */\n    function initialize(address _token0, address _token1) external {\n        require(token0 == address(0) && token1 == address(0), \"Already initialized\");\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    /**\n     * Retrieve Pool Details\n     */\n    function getPoolDetails()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (totalToken0, totalToken1, totalShares);\n    }\n\n    /**\n     * Return Estimatives for Token Locking\n     */\n    function getEquivalentToken0Estimate(uint256 _amountToken1) public view activePool returns (uint256 reqToken0) {\n        reqToken0 = (totalToken0 * _amountToken1) / totalToken1;\n    }\n\n    function getEquivalentToken1Estimate(uint256 _amountToken0) public view activePool returns (uint256 reqToken1) {\n        reqToken1 = (totalToken1 * _amountToken0) / totalToken0;\n    }\n\n    /**\n     * Add Liquidity into the Pool\n     *\n     * This method will withdraw the specified amount of tokens\n     * from the user and will lock into the pool, receiving the\n     * proportional amount of tokens.\n     */\n    function provide(uint256 _amountToken0, uint256 _amountToken1) external returns (uint256 share) {\n        // Check if user allowed us to spend his tokens and has enough\n        // tokens\n        {\n            require(IERC20(token0).balanceOf(msg.sender) >= _amountToken0, \"Insufficient Funds of Token0\");\n            require(IERC20(token1).balanceOf(msg.sender) >= _amountToken1, \"Insufficient Funds of Token1\");\n            uint256 allowance0 = IERC20(token0).allowance(msg.sender, address(this));\n            uint256 allowance1 = IERC20(token1).allowance(msg.sender, address(this));\n            require(allowance0 >= _amountToken0, \"You need allow us to spend token0\");\n            require(allowance1 >= _amountToken1, \"You need allow us to spend token1\");\n        }\n\n        // Retrieve amount of shares\n        if (totalShares == 0) {\n            // Genesis liquidity is issued 100 Shares\n            share = 100 * PRECISION;\n        } else {\n            uint256 share0 = (totalShares * _amountToken0) / totalToken0;\n            uint256 share1 = (totalShares * _amountToken1) / totalToken1;\n            require(share0 == share1, \"Equivalent value of tokens not provided...\");\n            share = share0;\n        }\n\n        require(share > 0, \"Asset value less than threshold for contribution!\");\n\n        // Transfer the tokens to this contract\n        IERC20(token0).transferFrom(msg.sender, address(this), _amountToken0);\n        IERC20(token1).transferFrom(msg.sender, address(this), _amountToken1);\n\n        totalToken0 += _amountToken0;\n        totalToken1 += _amountToken1;\n        k = totalToken0 * totalToken1;\n\n        totalShares += share;\n        shares[msg.sender] += share;\n    }\n\n    // Returns the estimate of Token1 & Token2 that will be released on burning given _share\n    function getWithdrawEstimate(uint256 _share)\n        public\n        view\n        activePool\n        returns (uint256 amountToken0, uint256 amountToken1)\n    {\n        require(_share <= totalShares, \"Share should be less than totalShare\");\n        amountToken0 = (_share * totalToken0) / totalShares;\n        amountToken1 = (_share * totalToken1) / totalShares;\n    }\n\n    // Removes liquidity from the pool and releases corresponding Token1 & Token2 to the withdrawer\n    function withdraw(uint256 _share) external activePool returns (uint256 amountToken0, uint256 amountToken1) {\n        require(shares[msg.sender] >= _share, \"Insuficcient amount of shares\");\n        (amountToken0, amountToken1) = getWithdrawEstimate(_share);\n\n        shares[msg.sender] -= _share;\n        totalShares -= _share;\n\n        totalToken0 -= amountToken0;\n        totalToken1 -= amountToken1;\n        k = totalToken0 * totalToken1;\n\n        // Transfer Tokens\n        require(IERC20(token0).transfer(msg.sender, amountToken0), \"Failed transfer token0\");\n        require(IERC20(token1).transfer(msg.sender, amountToken1), \"Failed transfer token1\");\n    }\n\n    /**\n     * Token Swaps\n     * ----------------------------------------------\n     */\n\n    /**\n     * Estimate the Number of Token1 with a specified deposit of Token0\n     */\n    function getSwapToken0Estimate(uint256 _amountToken0) public view activePool returns (uint256 amountToken1) {\n        uint256 token0After = totalToken0 + _amountToken0;\n        uint256 token1After = k / token0After;\n        amountToken1 = totalToken1 - token1After;\n\n        // To ensure that Token2's pool is not completely depleted leading to inf:0 ratio\n        if (amountToken1 == totalToken1) amountToken1--;\n    }\n\n    /**\n     * Estimate the Required Amount of Token0 to Get a Specified Amount of Token1\n     */\n    function getSwapToken0EstimateGivenToken1(uint256 _amountToken1)\n        public\n        view\n        activePool\n        returns (uint256 amountToken0)\n    {\n        require(_amountToken1 < totalToken1, \"Insufficient pool balance\");\n        uint256 token1After = totalToken1 / _amountToken1;\n        uint256 token0After = k / token1After;\n        amountToken0 = token0After - totalToken0;\n    }\n\n    /**\n     * Swap: Token0 -> Token1\n     */\n    function swapToken0(uint256 _amountToken0) external activePool returns (uint256 amountToken1) {\n        // Check\n        require(IERC20(token0).balanceOf(msg.sender) >= _amountToken0, \"Insufficient funds\");\n        require(\n            IERC20(token0).allowance(msg.sender, address(this)) >= _amountToken0,\n            \"You need allow us to spend this amount\"\n        );\n\n        // Caclulate the amount of tokens to receive\n        amountToken1 = getSwapToken0Estimate(_amountToken0);\n\n        // Update the state\n        totalToken0 += _amountToken0;\n        totalToken1 -= amountToken1;\n\n        // Transfer\n        IERC20(token0).transferFrom(msg.sender, address(this), _amountToken0);\n        IERC20(token1).transfer(msg.sender, amountToken1);\n    }\n\n    /**\n     * Estimate the Number of Token0 with a specified deposit of Token1\n     */\n    function getSwapToken1Estimate(uint256 _amountToken1) public view activePool returns (uint256 amountToken0) {\n        uint256 token1After = totalToken1 + _amountToken1;\n        uint256 token0After = k / token1After;\n        amountToken0 = totalToken0 - token0After;\n\n        // To ensure that Token0's pool is not completely depleted leading to inf:0 ratio\n        if (amountToken0 == totalToken0) amountToken0--;\n    }\n\n    /**\n     * Estimate the Required Amount of Token1 to Get a Specified Amount of Token0\n     */\n    function getSwapToken1EstimateGivenToken0(uint256 _amountToken0)\n        public\n        view\n        activePool\n        returns (uint256 amountToken1)\n    {\n        require(_amountToken0 < totalToken0, \"Insufficient pool balance\");\n        uint256 token0After = totalToken0 / _amountToken0;\n        uint256 token1After = k / token0After;\n        amountToken1 = token1After - totalToken1;\n    }\n\n    /**\n     * Swap: Token1 -> Token0\n     */\n    function swapToken1(uint256 _amountToken1) external activePool returns (uint256 amountToken0) {\n        // Check\n        require(IERC20(token1).balanceOf(msg.sender) >= _amountToken1, \"Insufficient funds\");\n        require(\n            IERC20(token1).allowance(msg.sender, address(this)) >= _amountToken1,\n            \"You need allow us to spend this amount\"\n        );\n\n        // Caclulate the amount of tokens to receive\n        amountToken0 = getSwapToken0Estimate(_amountToken1);\n\n        // Update the state\n        totalToken1 += _amountToken1;\n        totalToken0 -= amountToken0;\n\n        // Transfer\n        IERC20(token1).transferFrom(msg.sender, address(this), _amountToken1);\n        IERC20(token0).transfer(msg.sender, amountToken0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Token is ERC20, ERC20Burnable, Ownable {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}