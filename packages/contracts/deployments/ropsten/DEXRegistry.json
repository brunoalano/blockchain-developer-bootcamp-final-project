{
  "address": "0x84e6092Ff9737B5da254A6DB6367F073A78F2fAb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f5da0c7bd94889c018461d528d2324812f82f7969352aea266101d1666bcccd",
  "receipt": {
    "to": null,
    "from": "0x10281799d2904046a3b8De084d1dCF440Dbc37D1",
    "contractAddress": "0x84e6092Ff9737B5da254A6DB6367F073A78F2fAb",
    "transactionIndex": 4,
    "gasUsed": "1971157",
    "logsBloom": "0x
    "blockHash": "0xbed1e693709eed380553983be65d4dec5f48203ae47f38884b78938fb1fb14e0",
    "transactionHash": "0x9f5da0c7bd94889c018461d528d2324812f82f7969352aea266101d1666bcccd",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 11476894,
        "transactionHash": "0x9f5da0c7bd94889c018461d528d2324812f82f7969352aea266101d1666bcccd",
        "address": "0x84e6092Ff9737B5da254A6DB6367F073A78F2fAb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000010281799d2904046a3b8de084d1dcf440dbc37d1"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xbed1e693709eed380553983be65d4dec5f48203ae47f38884b78938fb1fb14e0"
      }
    ],
    "blockNumber": 11476894,
    "cumulativeGasUsed": "2309173",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1bdce38fb55f8f4c9493518eb81ef8e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allPools()\":{\"notice\":\"Retrieve a List of All Pools Useful for the frontend\"},\"countPools()\":{\"notice\":\"Return Total Number of Pools created\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXRegistry.sol\":\"DEXRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/DEXRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DEXTokenPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DEXRegistry is Ownable {\\n    // Store the Tokens Pool's Location\\n    mapping(address => mapping(address => address)) public registry;\\n\\n    // Store the pool's locations\\n    address[] public pools;\\n\\n    // Event triggered when a new pair is created\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    /**\\n     * Return Total Number of Pools created\\n     */\\n    function countPools() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /**\\n     * Retrieve a List of All Pools\\n     *\\n     * Useful for the frontend\\n     */\\n    function allPools() public view returns (address[] memory) {\\n        return pools;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"Must be different tokens\\\");\\n        require(tokenA != address(0), \\\"Invalid Token\\\");\\n\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(registry[token0][token1] == address(0), \\\"Pool already exists\\\");\\n\\n        bytes memory bytecode = type(DEXTokenPool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        DEXTokenPool(pair).initialize(token0, token1);\\n\\n        registry[token0][token1] = pair;\\n        registry[token1][token0] = pair;\\n        pools.push(pair);\\n\\n        // Send a new event for frontend\\n        emit PairCreated(token0, token1, pair, pools.length);\\n    }\\n}\\n\",\"keccak256\":\"0x80df1c5019e7ae1e8742e7eb6b8f0e3f8d80ecc5b1bdffcd60e9c78d09efc395\",\"license\":\"MIT\"},\"contracts/DEXTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract DEXTokenPool {\\n    // Store the Registry address\\n    address public registry;\\n\\n    // Store the ERC20 Tokens addresses\\n    address public token0;\\n    address public token1;\\n\\n    // Pool Settings\\n    // -------------------------------------\\n\\n    // Stores the total amount of share issued for the pool\\n    uint256 public totalShares;\\n\\n    // Stores the amount of Token0 locked in the pool\\n    uint256 public totalToken0;\\n\\n    // Stores the amount of Token1 locked in the pool\\n    uint256 public totalToken1;\\n\\n    // Algorithmic constant used to determine price (k = totalToken0 * totalToken1)\\n    uint256 public k;\\n\\n    // Stores the share holding of each provider\\n    uint256 public constant PRECISION = 1_000_000; // Precision of 6 decimal places for shares\\n    mapping(address => uint256) public shares;\\n\\n    // Restricts withdraw, swap feature till liquidity is added to the pool\\n    modifier activePool() {\\n        require(totalShares > 0, \\\"Zero Liquidity\\\");\\n        _;\\n    }\\n\\n    /**\\n     * DEXTokenPool Constructor\\n     *\\n     * This contract will be built by `DEXRegistry`, so we need to\\n     * assign it as a registry rulling this pool.\\n     */\\n    constructor() {\\n        registry = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize the Pool\\n     *\\n     * Since this contract will be deployed by `DEXRegistry`, we cannot pass\\n     * information to the constructor method. We will call this method once to\\n     * assign the token addresses to this pool.\\n     */\\n    function initialize(address _token0, address _token1) external {\\n        require(token0 == address(0) && token1 == address(0), \\\"Already initialized\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    /**\\n     * Retrieve Pool Details\\n     */\\n    function getPoolDetails()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (totalToken0, totalToken1, totalShares);\\n    }\\n\\n    /**\\n     * Return Estimatives for Token Locking\\n     */\\n    function getEquivalentToken0Estimate(uint256 _amountToken1) public view activePool returns (uint256 reqToken0) {\\n        reqToken0 = (totalToken0 * _amountToken1) / totalToken1;\\n    }\\n\\n    function getEquivalentToken1Estimate(uint256 _amountToken0) public view activePool returns (uint256 reqToken1) {\\n        reqToken1 = (totalToken1 * _amountToken0) / totalToken0;\\n    }\\n\\n    /**\\n     * Add Liquidity into the Pool\\n     *\\n     * This method will withdraw the specified amount of tokens\\n     * from the user and will lock into the pool, receiving the\\n     * proportional amount of tokens.\\n     */\\n    function provide(uint256 _amountToken0, uint256 _amountToken1) external returns (uint256 share) {\\n        // Check if user allowed us to spend his tokens and has enough\\n        // tokens\\n        {\\n            require(IERC20(token0).balanceOf(msg.sender) >= _amountToken0, \\\"Insufficient Funds of Token0\\\");\\n            require(IERC20(token1).balanceOf(msg.sender) >= _amountToken1, \\\"Insufficient Funds of Token1\\\");\\n            uint256 allowance0 = IERC20(token0).allowance(msg.sender, address(this));\\n            uint256 allowance1 = IERC20(token1).allowance(msg.sender, address(this));\\n            require(allowance0 >= _amountToken0, \\\"You need allow us to spend token0\\\");\\n            require(allowance1 >= _amountToken1, \\\"You need allow us to spend token1\\\");\\n        }\\n\\n        // Retrieve amount of shares\\n        if (totalShares == 0) {\\n            // Genesis liquidity is issued 100 Shares\\n            share = 100 * PRECISION;\\n        } else {\\n            uint256 share0 = (totalShares * _amountToken0) / totalToken0;\\n            uint256 share1 = (totalShares * _amountToken1) / totalToken1;\\n            require(share0 == share1, \\\"Equivalent value of tokens not provided...\\\");\\n            share = share0;\\n        }\\n\\n        require(share > 0, \\\"Asset value less than threshold for contribution!\\\");\\n\\n        // Transfer the tokens to this contract\\n        IERC20(token0).transferFrom(msg.sender, address(this), _amountToken0);\\n        IERC20(token1).transferFrom(msg.sender, address(this), _amountToken1);\\n\\n        totalToken0 += _amountToken0;\\n        totalToken1 += _amountToken1;\\n        k = totalToken0 * totalToken1;\\n\\n        totalShares += share;\\n        shares[msg.sender] += share;\\n    }\\n\\n    // Returns the estimate of Token1 & Token2 that will be released on burning given _share\\n    function getWithdrawEstimate(uint256 _share)\\n        public\\n        view\\n        activePool\\n        returns (uint256 amountToken0, uint256 amountToken1)\\n    {\\n        require(_share <= totalShares, \\\"Share should be less than totalShare\\\");\\n        amountToken0 = (_share * totalToken0) / totalShares;\\n        amountToken1 = (_share * totalToken1) / totalShares;\\n    }\\n\\n    // Removes liquidity from the pool and releases corresponding Token1 & Token2 to the withdrawer\\n    function withdraw(uint256 _share) external activePool returns (uint256 amountToken0, uint256 amountToken1) {\\n        require(shares[msg.sender] >= _share, \\\"Insuficcient amount of shares\\\");\\n        (amountToken0, amountToken1) = getWithdrawEstimate(_share);\\n\\n        shares[msg.sender] -= _share;\\n        totalShares -= _share;\\n\\n        totalToken0 -= amountToken0;\\n        totalToken1 -= amountToken1;\\n        k = totalToken0 * totalToken1;\\n\\n        // Transfer Tokens\\n        require(IERC20(token0).transfer(msg.sender, amountToken0), \\\"Failed transfer token0\\\");\\n        require(IERC20(token1).transfer(msg.sender, amountToken1), \\\"Failed transfer token1\\\");\\n    }\\n\\n    /**\\n     * Token Swaps\\n     * ----------------------------------------------\\n     */\\n\\n    /**\\n     * Estimate the Number of Token1 with a specified deposit of Token0\\n     */\\n    function getSwapToken0Estimate(uint256 _amountToken0) public view activePool returns (uint256 amountToken1) {\\n        uint256 token0After = totalToken0 + _amountToken0;\\n        uint256 token1After = k / token0After;\\n        amountToken1 = totalToken1 - token1After;\\n\\n        // To ensure that Token2's pool is not completely depleted leading to inf:0 ratio\\n        if (amountToken1 == totalToken1) amountToken1--;\\n    }\\n\\n    /**\\n     * Estimate the Required Amount of Token0 to Get a Specified Amount of Token1\\n     */\\n    function getSwapToken0EstimateGivenToken1(uint256 _amountToken1)\\n        public\\n        view\\n        activePool\\n        returns (uint256 amountToken0)\\n    {\\n        require(_amountToken1 < totalToken1, \\\"Insufficient pool balance\\\");\\n        uint256 token1After = totalToken1 / _amountToken1;\\n        uint256 token0After = k / token1After;\\n        amountToken0 = token0After - totalToken0;\\n    }\\n\\n    /**\\n     * Swap: Token0 -> Token1\\n     */\\n    function swapToken0(uint256 _amountToken0) external activePool returns (uint256 amountToken1) {\\n        // Check\\n        require(IERC20(token0).balanceOf(msg.sender) >= _amountToken0, \\\"Insufficient funds\\\");\\n        require(\\n            IERC20(token0).allowance(msg.sender, address(this)) >= _amountToken0,\\n            \\\"You need allow us to spend this amount\\\"\\n        );\\n\\n        // Caclulate the amount of tokens to receive\\n        amountToken1 = getSwapToken0Estimate(_amountToken0);\\n\\n        // Update the state\\n        totalToken0 += _amountToken0;\\n        totalToken1 -= amountToken1;\\n\\n        // Transfer\\n        IERC20(token0).transferFrom(msg.sender, address(this), _amountToken0);\\n        IERC20(token1).transfer(msg.sender, amountToken1);\\n    }\\n\\n    /**\\n     * Estimate the Number of Token0 with a specified deposit of Token1\\n     */\\n    function getSwapToken1Estimate(uint256 _amountToken1) public view activePool returns (uint256 amountToken0) {\\n        uint256 token1After = totalToken1 + _amountToken1;\\n        uint256 token0After = k / token1After;\\n        amountToken0 = totalToken0 - token0After;\\n\\n        // To ensure that Token0's pool is not completely depleted leading to inf:0 ratio\\n        if (amountToken0 == totalToken0) amountToken0--;\\n    }\\n\\n    /**\\n     * Estimate the Required Amount of Token1 to Get a Specified Amount of Token0\\n     */\\n    function getSwapToken1EstimateGivenToken0(uint256 _amountToken0)\\n        public\\n        view\\n        activePool\\n        returns (uint256 amountToken1)\\n    {\\n        require(_amountToken0 < totalToken0, \\\"Insufficient pool balance\\\");\\n        uint256 token0After = totalToken0 / _amountToken0;\\n        uint256 token1After = k / token0After;\\n        amountToken1 = token1After - totalToken1;\\n    }\\n\\n    /**\\n     * Swap: Token1 -> Token0\\n     */\\n    function swapToken1(uint256 _amountToken1) external activePool returns (uint256 amountToken0) {\\n        // Check\\n        require(IERC20(token1).balanceOf(msg.sender) >= _amountToken1, \\\"Insufficient funds\\\");\\n        require(\\n            IERC20(token1).allowance(msg.sender, address(this)) >= _amountToken1,\\n            \\\"You need allow us to spend this amount\\\"\\n        );\\n\\n        // Caclulate the amount of tokens to receive\\n        amountToken0 = getSwapToken0Estimate(_amountToken1);\\n\\n        // Update the state\\n        totalToken1 += _amountToken1;\\n        totalToken0 -= amountToken0;\\n\\n        // Transfer\\n        IERC20(token1).transferFrom(msg.sender, address(this), _amountToken1);\\n        IERC20(token0).transfer(msg.sender, amountToken0);\\n    }\\n}\\n\",\"keccak256\":\"0x4344f3d64ed4b2f8c30c7148cf00c81b25a936943ac3d88474223701f0329e1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6122578061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac4afa381161005b578063ac4afa3814610106578063c5c63e6514610119578063c9c653961461012e578063f2fde38b1461014157600080fd5b80636fcdfed61461008d578063715018a6146100a35780638da5cb5b146100ad578063a5afd1b6146100d2575b600080fd5b6002546040519081526020015b60405180910390f35b6100ab610154565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161009a565b6100ba6100e0366004610726565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6100ba610114366004610759565b6101bf565b6101216101e9565b60405161009a9190610772565b6100ba61013c366004610726565b61024b565b6100ab61014f3660046107bf565b6105b3565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101bd6000610695565b565b600281815481106101cf57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600280548060200260200160405190810160405280929190818152602001828054801561024157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610223575b5050505050905090565b6000816001600160a01b0316836001600160a01b031614156102af5760405162461bcd60e51b815260206004820152601860248201527f4d75737420626520646966666572656e7420746f6b656e73000000000000000060448201526064016101aa565b6001600160a01b0383166103055760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420546f6b656e0000000000000000000000000000000000000060448201526064016101aa565b600080836001600160a01b0316856001600160a01b03161061032857838561032b565b84845b6001600160a01b038083166000908152600160209081526040808320848616845290915290205492945090925016156103a65760405162461bcd60e51b815260206004820152601360248201527f506f6f6c20616c7265616479206578697374730000000000000000000000000060448201526064016101aa565b6000604051806020016103b8906106fd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f56040517f485cc9550000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156104b457600080fd5b505af11580156104c8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526001602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9094018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6000546001600160a01b0316331461060d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101aa565b6001600160a01b0381166106895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101aa565b61069281610695565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a40806107e283390190565b80356001600160a01b038116811461072157600080fd5b919050565b6000806040838503121561073957600080fd5b6107428361070a565b91506107506020840161070a565b90509250929050565b60006020828403121561076b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156107b35783516001600160a01b03168352928401929184019160010161078e565b50909695505050505050565b6000602082840312156107d157600080fd5b6107da8261070a565b939250505056fe608060405234801561001057600080fd5b50600080546001600160a01b03191633179055611a0e806100326000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806385770672116100d8578063b4f40c611161008c578063d7158cd411610066578063d7158cd414610329578063e8c3c54f14610332578063f4cb34d41461034557600080fd5b8063b4f40c61146102ed578063ce7c2ac2146102f6578063d21220a71461031657600080fd5b8063aaf5eb68116100bd578063aaf5eb68146102ac578063aca34c11146102b6578063b3244041146102da57600080fd5b806385770672146102865780638faca7391461029957600080fd5b80633a98ef391161013a5780637b103999116101145780637b1039991461025757806380abfda81461026a578063817121e71461027357600080fd5b80633a98ef3914610226578063450177c61461022f578063485cc9551461024257600080fd5b80632e1a7d4d1161016b5780632e1a7d4d146101d85780632f36e53714610200578063323823dd1461021357600080fd5b8063078b7fdc146101875780630dfe1681146101ad575b600080fd5b61019a610195366004611822565b610358565b6040519081526020015b60405180910390f35b6001546101c0906001600160a01b031681565b6040516001600160a01b0390911681526020016101a4565b6101eb6101e6366004611822565b6103c2565b604080519283526020830191909152016101a4565b61019a61020e366004611822565b61069c565b61019a610221366004611822565b61076b565b61019a60035481565b61019a61023d366004611822565b610832565b610255610250366004611857565b6108c9565b005b6000546101c0906001600160a01b031681565b61019a60055481565b61019a610281366004611822565b61097d565b61019a610294366004611822565b610cd0565b61019a6102a7366004611822565b610d25565b61019a620f424081565b600454600554600354604080519384526020840192909252908201526060016101a4565b6101eb6102e8366004611822565b610db1565b61019a60065481565b61019a61030436600461188a565b60076020526000908152604090205481565b6002546101c0906001600160a01b031681565b61019a60045481565b61019a6103403660046118ac565b610eac565b61019a610353366004611822565b611523565b600080600354116103a15760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b60448201526064015b60405180910390fd5b600454826005546103b291906118fd565b6103bc919061191c565b92915050565b6000806000600354116104085760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b336000908152600760205260409020548311156104675760405162461bcd60e51b815260206004820152601d60248201527f496e73756669636369656e7420616d6f756e74206f66207368617265730000006044820152606401610398565b61047083610db1565b33600090815260076020526040812080549395509193508592610494908490611957565b9250508190555082600360008282546104ad9190611957565b9250508190555081600460008282546104c69190611957565b9250508190555080600560008282546104df9190611957565b90915550506005546004546104f491906118fd565b60065560015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561054357600080fd5b505af1158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b919061196e565b6105c75760405162461bcd60e51b815260206004820152601660248201527f4661696c6564207472616e7366657220746f6b656e30000000000000000000006044820152606401610398565b60025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b919061196e565b6106975760405162461bcd60e51b815260206004820152601660248201527f4661696c6564207472616e7366657220746f6b656e31000000000000000000006044820152606401610398565b915091565b600080600354116106e05760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b60055482106107315760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420706f6f6c2062616c616e6365000000000000006044820152606401610398565b600082600554610741919061191c565b9050600081600654610753919061191c565b9050600454816107639190611957565b949350505050565b600080600354116107af5760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b60045482106108005760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420706f6f6c2062616c616e6365000000000000006044820152606401610398565b600082600454610810919061191c565b9050600081600654610822919061191c565b9050600554816107639190611957565b600080600354116108765760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b6000826005546108869190611990565b9050600081600654610898919061191c565b9050806004546108a89190611957565b92506004548314156108c257826108be816119a8565b9350505b5050919050565b6001546001600160a01b03161580156108eb57506002546001600160a01b0316155b6109375760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610398565b600180546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560028054929093169116179055565b600080600354116109c15760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c91906119bf565b1015610a8a5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e647300000000000000000000000000006044820152606401610398565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610ad357600080fd5b505afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b91906119bf565b1015610b7f5760405162461bcd60e51b815260206004820152602660248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746869732060448201527f616d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610398565b610b8882610d25565b90508160046000828254610b9c9190611990565b925050819055508060056000828254610bb59190611957565b90915550506001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610c0c57600080fd5b505af1158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c44919061196e565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b158015610c9257600080fd5b505af1158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca919061196e565b50919050565b60008060035411610d145760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b600554826004546103b291906118fd565b60008060035411610d695760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b600082600454610d799190611990565b9050600081600654610d8b919061191c565b905080600554610d9b9190611957565b92506005548314156108c257826108be816119a8565b600080600060035411610df75760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b600354831115610e6e5760405162461bcd60e51b8152602060048201526024808201527f53686172652073686f756c64206265206c657373207468616e20746f74616c5360448201527f68617265000000000000000000000000000000000000000000000000000000006064820152608401610398565b600354600454610e7e90856118fd565b610e88919061191c565b915060035460055484610e9b91906118fd565b610ea5919061191c565b9050915091565b6001546040516370a0823160e01b815233600482015260009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906119bf565b1015610f7a5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046756e6473206f6620546f6b656e30000000006044820152606401610398565b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff591906119bf565b10156110435760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046756e6473206f6620546f6b656e31000000006044820152606401610398565b600154604051636eb1769f60e11b81523360048201523060248201526000916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561108d57600080fd5b505afa1580156110a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c591906119bf565b600254604051636eb1769f60e11b81523360048201523060248201529192506000916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b15801561111457600080fd5b505afa158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c91906119bf565b9050848210156111c45760405162461bcd60e51b815260206004820152602160248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746f6b656e60448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610398565b8381101561123a5760405162461bcd60e51b815260206004820152602160248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746f6b656e60448201527f31000000000000000000000000000000000000000000000000000000000000006064820152608401610398565b505060035461125857611251620f424060646118fd565b905061130f565b60006004548460035461126b91906118fd565b611275919061191c565b905060006005548460035461128a91906118fd565b611294919061191c565b905080821461130b5760405162461bcd60e51b815260206004820152602a60248201527f4571756976616c656e742076616c7565206f6620746f6b656e73206e6f74207060448201527f726f76696465642e2e2e000000000000000000000000000000000000000000006064820152608401610398565b5090505b600081116113855760405162461bcd60e51b815260206004820152603160248201527f41737365742076616c7565206c657373207468616e207468726573686f6c642060448201527f666f7220636f6e747269627574696f6e210000000000000000000000000000006064820152608401610398565b6001546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f919061196e565b506002546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561146257600080fd5b505af1158015611476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149a919061196e565b5082600460008282546114ad9190611990565b9250508190555081600560008282546114c69190611990565b90915550506005546004546114db91906118fd565b60068190555080600360008282546114f39190611990565b90915550503360009081526007602052604081208054839290611517908490611990565b90915550909392505050565b600080600354116115675760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e291906119bf565b10156116305760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e647300000000000000000000000000006044820152606401610398565b600254604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561167957600080fd5b505afa15801561168d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b191906119bf565b10156117255760405162461bcd60e51b815260206004820152602660248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746869732060448201527f616d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610398565b61172e82610d25565b905081600560008282546117429190611990565b92505081905550806004600082825461175b9190611957565b90915550506002546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156117b257600080fd5b505af11580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea919061196e565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401610c78565b60006020828403121561183457600080fd5b5035919050565b80356001600160a01b038116811461185257600080fd5b919050565b6000806040838503121561186a57600080fd5b6118738361183b565b91506118816020840161183b565b90509250929050565b60006020828403121561189c57600080fd5b6118a58261183b565b9392505050565b600080604083850312156118bf57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000816000190483118215151615611917576119176118ce565b500290565b600082611952577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611969576119696118ce565b500390565b60006020828403121561198057600080fd5b815180151581146118a557600080fd5b600082198211156119a3576119a36118ce565b500190565b6000816119b7576119b76118ce565b506000190190565b6000602082840312156119d157600080fd5b505191905056fea2646970667358221220a84c628b38b06e5b82822bf84b7077eceedd3435703c769e6057d0c3fe263a6564736f6c63430008090033a2646970667358221220963ed5bb7788c144762a0b418b2edee0c1add3b68984517e9d9ae7a4f5d33c4064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac4afa381161005b578063ac4afa3814610106578063c5c63e6514610119578063c9c653961461012e578063f2fde38b1461014157600080fd5b80636fcdfed61461008d578063715018a6146100a35780638da5cb5b146100ad578063a5afd1b6146100d2575b600080fd5b6002546040519081526020015b60405180910390f35b6100ab610154565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161009a565b6100ba6100e0366004610726565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6100ba610114366004610759565b6101bf565b6101216101e9565b60405161009a9190610772565b6100ba61013c366004610726565b61024b565b6100ab61014f3660046107bf565b6105b3565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101bd6000610695565b565b600281815481106101cf57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600280548060200260200160405190810160405280929190818152602001828054801561024157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610223575b5050505050905090565b6000816001600160a01b0316836001600160a01b031614156102af5760405162461bcd60e51b815260206004820152601860248201527f4d75737420626520646966666572656e7420746f6b656e73000000000000000060448201526064016101aa565b6001600160a01b0383166103055760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420546f6b656e0000000000000000000000000000000000000060448201526064016101aa565b600080836001600160a01b0316856001600160a01b03161061032857838561032b565b84845b6001600160a01b038083166000908152600160209081526040808320848616845290915290205492945090925016156103a65760405162461bcd60e51b815260206004820152601360248201527f506f6f6c20616c7265616479206578697374730000000000000000000000000060448201526064016101aa565b6000604051806020016103b8906106fd565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f56040517f485cc9550000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156104b457600080fd5b505af11580156104c8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526001602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9094018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6000546001600160a01b0316331461060d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101aa565b6001600160a01b0381166106895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101aa565b61069281610695565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a40806107e283390190565b80356001600160a01b038116811461072157600080fd5b919050565b6000806040838503121561073957600080fd5b6107428361070a565b91506107506020840161070a565b90509250929050565b60006020828403121561076b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156107b35783516001600160a01b03168352928401929184019160010161078e565b50909695505050505050565b6000602082840312156107d157600080fd5b6107da8261070a565b939250505056fe608060405234801561001057600080fd5b50600080546001600160a01b03191633179055611a0e806100326000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806385770672116100d8578063b4f40c611161008c578063d7158cd411610066578063d7158cd414610329578063e8c3c54f14610332578063f4cb34d41461034557600080fd5b8063b4f40c61146102ed578063ce7c2ac2146102f6578063d21220a71461031657600080fd5b8063aaf5eb68116100bd578063aaf5eb68146102ac578063aca34c11146102b6578063b3244041146102da57600080fd5b806385770672146102865780638faca7391461029957600080fd5b80633a98ef391161013a5780637b103999116101145780637b1039991461025757806380abfda81461026a578063817121e71461027357600080fd5b80633a98ef3914610226578063450177c61461022f578063485cc9551461024257600080fd5b80632e1a7d4d1161016b5780632e1a7d4d146101d85780632f36e53714610200578063323823dd1461021357600080fd5b8063078b7fdc146101875780630dfe1681146101ad575b600080fd5b61019a610195366004611822565b610358565b6040519081526020015b60405180910390f35b6001546101c0906001600160a01b031681565b6040516001600160a01b0390911681526020016101a4565b6101eb6101e6366004611822565b6103c2565b604080519283526020830191909152016101a4565b61019a61020e366004611822565b61069c565b61019a610221366004611822565b61076b565b61019a60035481565b61019a61023d366004611822565b610832565b610255610250366004611857565b6108c9565b005b6000546101c0906001600160a01b031681565b61019a60055481565b61019a610281366004611822565b61097d565b61019a610294366004611822565b610cd0565b61019a6102a7366004611822565b610d25565b61019a620f424081565b600454600554600354604080519384526020840192909252908201526060016101a4565b6101eb6102e8366004611822565b610db1565b61019a60065481565b61019a61030436600461188a565b60076020526000908152604090205481565b6002546101c0906001600160a01b031681565b61019a60045481565b61019a6103403660046118ac565b610eac565b61019a610353366004611822565b611523565b600080600354116103a15760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b60448201526064015b60405180910390fd5b600454826005546103b291906118fd565b6103bc919061191c565b92915050565b6000806000600354116104085760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b336000908152600760205260409020548311156104675760405162461bcd60e51b815260206004820152601d60248201527f496e73756669636369656e7420616d6f756e74206f66207368617265730000006044820152606401610398565b61047083610db1565b33600090815260076020526040812080549395509193508592610494908490611957565b9250508190555082600360008282546104ad9190611957565b9250508190555081600460008282546104c69190611957565b9250508190555080600560008282546104df9190611957565b90915550506005546004546104f491906118fd565b60065560015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561054357600080fd5b505af1158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b919061196e565b6105c75760405162461bcd60e51b815260206004820152601660248201527f4661696c6564207472616e7366657220746f6b656e30000000000000000000006044820152606401610398565b60025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b919061196e565b6106975760405162461bcd60e51b815260206004820152601660248201527f4661696c6564207472616e7366657220746f6b656e31000000000000000000006044820152606401610398565b915091565b600080600354116106e05760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b60055482106107315760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420706f6f6c2062616c616e6365000000000000006044820152606401610398565b600082600554610741919061191c565b9050600081600654610753919061191c565b9050600454816107639190611957565b949350505050565b600080600354116107af5760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b60045482106108005760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420706f6f6c2062616c616e6365000000000000006044820152606401610398565b600082600454610810919061191c565b9050600081600654610822919061191c565b9050600554816107639190611957565b600080600354116108765760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b6000826005546108869190611990565b9050600081600654610898919061191c565b9050806004546108a89190611957565b92506004548314156108c257826108be816119a8565b9350505b5050919050565b6001546001600160a01b03161580156108eb57506002546001600160a01b0316155b6109375760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a6564000000000000000000000000006044820152606401610398565b600180546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560028054929093169116179055565b600080600354116109c15760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c91906119bf565b1015610a8a5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e647300000000000000000000000000006044820152606401610398565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610ad357600080fd5b505afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b91906119bf565b1015610b7f5760405162461bcd60e51b815260206004820152602660248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746869732060448201527f616d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610398565b610b8882610d25565b90508160046000828254610b9c9190611990565b925050819055508060056000828254610bb59190611957565b90915550506001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610c0c57600080fd5b505af1158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c44919061196e565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b158015610c9257600080fd5b505af1158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca919061196e565b50919050565b60008060035411610d145760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b600554826004546103b291906118fd565b60008060035411610d695760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b600082600454610d799190611990565b9050600081600654610d8b919061191c565b905080600554610d9b9190611957565b92506005548314156108c257826108be816119a8565b600080600060035411610df75760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b600354831115610e6e5760405162461bcd60e51b8152602060048201526024808201527f53686172652073686f756c64206265206c657373207468616e20746f74616c5360448201527f68617265000000000000000000000000000000000000000000000000000000006064820152608401610398565b600354600454610e7e90856118fd565b610e88919061191c565b915060035460055484610e9b91906118fd565b610ea5919061191c565b9050915091565b6001546040516370a0823160e01b815233600482015260009184916001600160a01b03909116906370a082319060240160206040518083038186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906119bf565b1015610f7a5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046756e6473206f6620546f6b656e30000000006044820152606401610398565b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff591906119bf565b10156110435760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046756e6473206f6620546f6b656e31000000006044820152606401610398565b600154604051636eb1769f60e11b81523360048201523060248201526000916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561108d57600080fd5b505afa1580156110a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c591906119bf565b600254604051636eb1769f60e11b81523360048201523060248201529192506000916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b15801561111457600080fd5b505afa158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c91906119bf565b9050848210156111c45760405162461bcd60e51b815260206004820152602160248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746f6b656e60448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610398565b8381101561123a5760405162461bcd60e51b815260206004820152602160248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746f6b656e60448201527f31000000000000000000000000000000000000000000000000000000000000006064820152608401610398565b505060035461125857611251620f424060646118fd565b905061130f565b60006004548460035461126b91906118fd565b611275919061191c565b905060006005548460035461128a91906118fd565b611294919061191c565b905080821461130b5760405162461bcd60e51b815260206004820152602a60248201527f4571756976616c656e742076616c7565206f6620746f6b656e73206e6f74207060448201527f726f76696465642e2e2e000000000000000000000000000000000000000000006064820152608401610398565b5090505b600081116113855760405162461bcd60e51b815260206004820152603160248201527f41737365742076616c7565206c657373207468616e207468726573686f6c642060448201527f666f7220636f6e747269627574696f6e210000000000000000000000000000006064820152608401610398565b6001546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140f919061196e565b506002546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561146257600080fd5b505af1158015611476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149a919061196e565b5082600460008282546114ad9190611990565b9250508190555081600560008282546114c69190611990565b90915550506005546004546114db91906118fd565b60068190555080600360008282546114f39190611990565b90915550503360009081526007602052604081208054839290611517908490611990565b90915550909392505050565b600080600354116115675760405162461bcd60e51b815260206004820152600e60248201526d5a65726f204c697175696469747960901b6044820152606401610398565b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e291906119bf565b10156116305760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e647300000000000000000000000000006044820152606401610398565b600254604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561167957600080fd5b505afa15801561168d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b191906119bf565b10156117255760405162461bcd60e51b815260206004820152602660248201527f596f75206e65656420616c6c6f7720757320746f207370656e6420746869732060448201527f616d6f756e7400000000000000000000000000000000000000000000000000006064820152608401610398565b61172e82610d25565b905081600560008282546117429190611990565b92505081905550806004600082825461175b9190611957565b90915550506002546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156117b257600080fd5b505af11580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea919061196e565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401610c78565b60006020828403121561183457600080fd5b5035919050565b80356001600160a01b038116811461185257600080fd5b919050565b6000806040838503121561186a57600080fd5b6118738361183b565b91506118816020840161183b565b90509250929050565b60006020828403121561189c57600080fd5b6118a58261183b565b9392505050565b600080604083850312156118bf57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000816000190483118215151615611917576119176118ce565b500290565b600082611952577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611969576119696118ce565b500390565b60006020828403121561198057600080fd5b815180151581146118a557600080fd5b600082198211156119a3576119a36118ce565b500190565b6000816119b7576119b76118ce565b506000190190565b6000602082840312156119d157600080fd5b505191905056fea2646970667358221220a84c628b38b06e5b82822bf84b7077eceedd3435703c769e6057d0c3fe263a6564736f6c63430008090033a2646970667358221220963ed5bb7788c144762a0b418b2edee0c1add3b68984517e9d9ae7a4f5d33c4064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allPools()": {
        "notice": "Retrieve a List of All Pools Useful for the frontend"
      },
      "countPools()": {
        "notice": "Return Total Number of Pools created"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DEXRegistry.sol:DEXRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 848,
        "contract": "contracts/DEXRegistry.sol:DEXRegistry",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 851,
        "contract": "contracts/DEXRegistry.sol:DEXRegistry",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}