/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DEXTokenPoolInterface extends ethers.utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "getEquivalentToken0Estimate(uint256)": FunctionFragment;
    "getEquivalentToken1Estimate(uint256)": FunctionFragment;
    "getPoolDetails()": FunctionFragment;
    "getSwapToken0Estimate(uint256)": FunctionFragment;
    "getSwapToken0EstimateGivenToken1(uint256)": FunctionFragment;
    "getSwapToken1Estimate(uint256)": FunctionFragment;
    "getSwapToken1EstimateGivenToken0(uint256)": FunctionFragment;
    "getWithdrawEstimate(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "k()": FunctionFragment;
    "provide(uint256,uint256)": FunctionFragment;
    "registry()": FunctionFragment;
    "shares(address)": FunctionFragment;
    "swapToken0(uint256)": FunctionFragment;
    "swapToken1(uint256)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalToken0()": FunctionFragment;
    "totalToken1()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEquivalentToken0Estimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquivalentToken1Estimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToken0Estimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToken0EstimateGivenToken1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToken1Estimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToken1EstimateGivenToken0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawEstimate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provide",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapToken0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToken1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalToken0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalToken1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEquivalentToken0Estimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquivalentToken1Estimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToken0Estimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToken0EstimateGivenToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToken1Estimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToken1EstimateGivenToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provide", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapToken0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapToken1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class DEXTokenPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DEXTokenPoolInterface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEquivalentToken0Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reqToken0: BigNumber }>;

    getEquivalentToken1Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reqToken1: BigNumber }>;

    getPoolDetails(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getSwapToken0Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToken1: BigNumber }>;

    getSwapToken0EstimateGivenToken1(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToken0: BigNumber }>;

    getSwapToken1Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToken0: BigNumber }>;

    getSwapToken1EstimateGivenToken0(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToken1: BigNumber }>;

    getWithdrawEstimate(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountToken0: BigNumber;
        amountToken1: BigNumber;
      }
    >;

    initialize(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    k(overrides?: CallOverrides): Promise<[BigNumber]>;

    provide(
      _amountToken0: BigNumberish,
      _amountToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    shares(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapToken0(
      _amountToken0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapToken1(
      _amountToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalToken0(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalToken1(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  getEquivalentToken0Estimate(
    _amountToken1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEquivalentToken1Estimate(
    _amountToken0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolDetails(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getSwapToken0Estimate(
    _amountToken0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapToken0EstimateGivenToken1(
    _amountToken1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapToken1Estimate(
    _amountToken1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapToken1EstimateGivenToken0(
    _amountToken0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawEstimate(
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountToken0: BigNumber;
      amountToken1: BigNumber;
    }
  >;

  initialize(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  k(overrides?: CallOverrides): Promise<BigNumber>;

  provide(
    _amountToken0: BigNumberish,
    _amountToken1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapToken0(
    _amountToken0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapToken1(
    _amountToken1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalToken0(overrides?: CallOverrides): Promise<BigNumber>;

  totalToken1(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    getEquivalentToken0Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquivalentToken1Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolDetails(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getSwapToken0Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken0EstimateGivenToken1(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken1Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken1EstimateGivenToken0(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawEstimate(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountToken0: BigNumber;
        amountToken1: BigNumber;
      }
    >;

    initialize(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    provide(
      _amountToken0: BigNumberish,
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapToken0(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToken1(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken0(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken1(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountToken0: BigNumber;
        amountToken1: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    getEquivalentToken0Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquivalentToken1Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapToken0Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken0EstimateGivenToken1(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken1Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken1EstimateGivenToken0(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawEstimate(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    provide(
      _amountToken0: BigNumberish,
      _amountToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapToken0(
      _amountToken0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapToken1(
      _amountToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken0(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken1(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEquivalentToken0Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquivalentToken1Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapToken0Estimate(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToken0EstimateGivenToken1(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToken1Estimate(
      _amountToken1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToken1EstimateGivenToken0(
      _amountToken0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawEstimate(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provide(
      _amountToken0: BigNumberish,
      _amountToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapToken0(
      _amountToken0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapToken1(
      _amountToken1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalToken0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
